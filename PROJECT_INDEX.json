{
  "indexed_at": "2025-08-21T20:43:39.771558",
  "root": ".",
  "project_structure": {
    "type": "tree",
    "root": ".",
    "tree": [
      ".",
      "\u251c\u2500\u2500 config/",
      "\u2502   \u2514\u2500\u2500 tmuxinator/",
      "\u251c\u2500\u2500 docs/",
      "\u251c\u2500\u2500 prisma/ (5 files)",
      "\u2502   \u2514\u2500\u2500 migrations/ (5 files)",
      "\u2502       \u251c\u2500\u2500 20250708012432_init/ (1 files)",
      "\u2502       \u251c\u2500\u2500 20250708083148_add_historical_fields/ (1 files)",
      "\u2502       \u251c\u2500\u2500 20250708131651_add_completion_tracking/ (1 files)",
      "\u2502       \u251c\u2500\u2500 20250821100247_add_comprehensive_metadata/ (1 files)",
      "\u2502       \u2514\u2500\u2500 20250821102909_add_comprehensive_metadata/ (1 files)",
      "\u251c\u2500\u2500 src/ (24 files)",
      "\u2502   \u251c\u2500\u2500 __tests__/ (2 files)",
      "\u2502   \u251c\u2500\u2500 mocks/ (3 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 handlers/ (1 files)",
      "\u2502   \u251c\u2500\u2500 services/ (16 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 __tests__/ (8 files)",
      "\u2502   \u251c\u2500\u2500 tools/",
      "\u2502   \u2502   \u2514\u2500\u2500 __tests__/",
      "\u2502   \u251c\u2500\u2500 types/ (1 files)",
      "\u2502   \u2514\u2500\u2500 utils/",
      "\u2502       \u2514\u2500\u2500 __tests__/",
      "\u251c\u2500\u2500 tests/ (6 files)",
      "\u2502   \u251c\u2500\u2500 fixtures/ (1 files)",
      "\u2502   \u251c\u2500\u2500 integration/ (1 files)",
      "\u2502   \u2514\u2500\u2500 utils/ (2 files)",
      "\u251c\u2500\u2500 package.json",
      "\u2514\u2500\u2500 README.md"
    ]
  },
  "documentation_map": {
    "README.md": {
      "sections": [
        "Azure DevOps Bot",
        "\ud83d\ude80 Key Features",
        "\ud83d\udd10 **Secure Authentication**",
        "\ud83e\udde0 **Intelligent Query Processing**",
        "\ud83d\uddc4\ufe0f **Local Database & Sync**",
        "\ud83d\udd0d **Comprehensive Search Capabilities**",
        "\ud83e\udd16 **MCP Server Integration**",
        "\ud83c\udfd7\ufe0f Architecture",
        "Core Components",
        "\ud83d\udee0\ufe0f Setup"
      ],
      "architecture_hints": []
    },
    "CLAUDE.md": {
      "sections": [
        "CLAUDE.md",
        "Development Commands",
        "Core Commands",
        "Testing",
        "Database",
        "Project Architecture",
        "Core Components",
        "Key Services (`src/services/`)",
        "Data Flow",
        "Database Schema"
      ],
      "architecture_hints": []
    },
    "docs/TESTING_PLAN.md": {
      "sections": [
        "MCP Server Testing Plan",
        "Overview",
        "Testing Architecture",
        "1. Vitest Configuration Setup",
        "2. Test Structure and Organization",
        "3. MSW Setup for External APIs",
        "4. Prisma Mock Setup",
        "5. MCP Protocol Testing",
        "6. Test-First Development Patterns"
      ],
      "architecture_hints": []
    },
    "docs/ROADMAP.md": {
      "sections": [
        "Current State Analysis",
        "Azure DevOps Bot MCP Server (Production Ready)",
        "Dev Tools MCP Server (Development)",
        "Phase 1: Azure DevOps Server Enhancements",
        "1. Work Item Management",
        "2. Advanced Querying",
        "3. Team Collaboration",
        "Phase 2: Dev Tools Server Enhancements",
        "1. Enhanced Git Integration",
        "2. Code Quality Tools"
      ],
      "architecture_hints": []
    },
    ".agent-os/product/mission.md": {
      "sections": [
        "Product Mission",
        "Pitch",
        "Users",
        "Primary Customers",
        "User Personas",
        "The Problem",
        "Slow Access to Azure DevOps Data",
        "Limited Reporting Capabilities",
        "No Always-On Availability",
        "Differentiators"
      ],
      "architecture_hints": []
    },
    ".agent-os/product/tech-stack.md": {
      "sections": [
        "Technical Stack",
        "Application Framework",
        "Database System",
        "External Integrations",
        "Development Tools",
        "Process Management",
        "Code Quality",
        "Infrastructure",
        "Security",
        "Performance Strategy"
      ],
      "architecture_hints": []
    },
    ".agent-os/product/roadmap.md": {
      "sections": [
        "Product Roadmap",
        "Phase 0: Already Completed \u2705",
        "Phase 1: Always-On Data Mirror (Current Sprint) \ud83d\udea7",
        "Must-Have Features",
        "Should-Have Features",
        "Dependencies",
        "Phase 2: Production Hardening (Next Sprint)",
        "Must-Have Features",
        "Should-Have Features",
        "Phase 3: Enhanced Integration (Future)"
      ],
      "architecture_hints": []
    },
    ".agent-os/product/decisions.md": {
      "sections": [
        "Product Decisions Log",
        "2025-08-21: Initial Product Architecture",
        "Decision",
        "Context",
        "Alternatives Considered",
        "Rationale",
        "Consequences",
        "2025-08-21: Always-On Architecture Choice",
        "Decision",
        "Context"
      ],
      "architecture_hints": []
    },
    ".agent-os/specs/2025-08-21-comprehensive-schema/tasks.md": {
      "sections": [
        "Spec Tasks",
        "Tasks",
        "Spec Documentation"
      ],
      "architecture_hints": []
    },
    ".agent-os/specs/2025-08-21-comprehensive-schema/spec.md": {
      "sections": [
        "Spec Requirements Document",
        "Overview",
        "User Stories",
        "Complete Data Capture",
        "Future-Proof Schema",
        "Spec Scope",
        "Out of Scope",
        "Expected Deliverable"
      ],
      "architecture_hints": []
    },
    ".agent-os/specs/2025-08-21-comprehensive-schema/sub-specs/technical-spec.md": {
      "sections": [
        "Technical Specification",
        "Technical Requirements",
        "Approach Options",
        "External Dependencies",
        "Implementation Strategy",
        "Phase 1: Field Discovery",
        "Phase 2: Schema Design",
        "Phase 3: Migration and Sync Update",
        "Risk Mitigation"
      ],
      "architecture_hints": []
    },
    ".agent-os/specs/2025-08-21-comprehensive-schema/sub-specs/database-schema.md": {
      "sections": [
        "Database Schema",
        "Schema Changes",
        "New Fields to Add",
        "Migration SQL",
        "Rationale",
        "Data Integrity"
      ],
      "architecture_hints": []
    },
    ".agent-os/specs/2025-08-21-comprehensive-schema/sub-specs/tests.md": {
      "sections": [
        "Tests Specification",
        "Test Coverage",
        "Unit Tests",
        "Integration Tests",
        "Mocking Requirements"
      ],
      "architecture_hints": []
    }
  },
  "directory_purposes": {
    "tests": "Test files and test utilities",
    "docs": "Project documentation",
    "src": "Source code root directory",
    "tests/integration": "Test files and test utilities",
    "tests/utils": "Shared utility functions and helpers",
    "tests/fixtures": "Test fixtures and sample data",
    "src/types": "Test files and test utilities",
    "src/__tests__": "Test files and test utilities",
    "src/services": "Business logic and external service integrations",
    "src/services/__tests__": "Test files and test utilities",
    ".agent-os/specs/2025-08-21-comprehensive-schema": "Test files and test utilities",
    ".agent-os/specs/2025-08-21-comprehensive-schema/sub-specs": "Test specifications"
  },
  "stats": {
    "total_files": 48,
    "total_directories": 38,
    "fully_parsed": {
      "typescript": 30
    },
    "listed_only": {
      "json": 13,
      "sql": 5
    },
    "markdown_files": 13
  },
  "files": {
    "package.json": {
      "language": "json",
      "parsed": false
    },
    "tsconfig.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "vitest.config.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "PROJECT_INDEX.json": {
      "language": "json",
      "parsed": false
    },
    "mcp-config.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "tests/mcp-integration.setup.ts": {
      "language": "typescript",
      "parsed": false
    },
    "tests/vitest.setup.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    ".obsidian/workspace.json": {
      "language": "json",
      "parsed": false
    },
    ".obsidian/app.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Application entry point"
    },
    ".obsidian/core-plugins.json": {
      "language": "json",
      "parsed": false
    },
    ".obsidian/appearance.json": {
      "language": "json",
      "parsed": false
    },
    "src/mcp-server.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@modelcontextprotocol/sdk/server/index.js",
        "@modelcontextprotocol/sdk/server/stdio.js",
        "@modelcontextprotocol/sdk/types.js",
        "./services/sync-service.js",
        "./services/database.js",
        "./services/query-engine.js",
        "./services/azure-devops.js",
        "./services/auth.js"
      ],
      "functions": {},
      "classes": {
        "AzureDevOpsMCPServer": {
          "methods": {
            "constructor": "()",
            "start": "async ()",
            "stop": "async ()",
            "__init__": "()"
          }
        }
      },
      "variables": [
        "args",
        "emailArg",
        "emails",
        "filter",
        "newItems",
        "activeItems",
        "inProgressItems",
        "query",
        "response",
        "id",
        "url",
        "shouldSync",
        "transport",
        "server"
      ],
      "call_graph": {}
    },
    "src/index.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Application entry point",
      "imports": [
        "./services/sync-service.js",
        "./services/database.js",
        "./services/query-engine.js",
        "./services/azure-devops.js"
      ],
      "functions": {},
      "classes": {
        "AzureDevOpsBot": {
          "methods": {
            "constructor": "()",
            "start": "async (): Promise<void>",
            "stop": "async (): Promise<void>",
            "__init__": "()"
          }
        }
      },
      "variables": [
        "envEmails",
        "emails",
        "azureClient",
        "shouldSync",
        "query",
        "response",
        "bot"
      ],
      "call_graph": {}
    },
    "src/mocks/prisma.mock.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "vitest",
        "@prisma/client"
      ],
      "functions": {
        "resetPrismaMocks": "()",
        "setupPrismaDefaults": "()"
      },
      "classes": {},
      "variables": [
        "mockWorkItemData",
        "mockPrismaClient",
        "resetPrismaMocks",
        "setupPrismaDefaults",
        "item",
        "newItem",
        "existingItem",
        "updatedItem"
      ],
      "call_graph": {}
    },
    "src/mocks/server.ts": {
      "language": "typescript",
      "parsed": false
    },
    "src/types/test-utils.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/__tests__/mcp-server.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/__tests__/index.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/semantic-search.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {},
      "classes": {
        "SemanticSearchEngine": {
          "methods": {
            "extractConcepts": "(text: string): Concept[]",
            "recognizeIntent": "(query: string): QueryIntent",
            "parseSemanticQuery": "(query: string): SemanticQuery",
            "calculateSimilarity": "(semanticQuery: SemanticQuery, workItem: any): SemanticMatch",
            "findSimilarWorkItems": "async (query: string, workItems: any[]): Promise<SemanticMatch[]>"
          }
        }
      },
      "variables": [
        "normalizedText",
        "words",
        "expandedWords",
        "fuzzyMatch",
        "primaryMatches",
        "secondaryMatches",
        "isFromAbbreviation",
        "weight",
        "uniqueConcepts",
        "normalizedQuery",
        "concepts",
        "intent",
        "confidence",
        "filters",
        "workItemText",
        "workItemConcepts",
        "factorScores",
        "weights",
        "overallScore",
        "reasons",
        "semanticQuery",
        "matches",
        "threshold",
        "partialMatch",
        "commonWords",
        "seen",
        "key",
        "wordCount",
        "domains",
        "queryLower",
        "queryTerms",
        "itemTerms",
        "intersection",
        "queryDomains",
        "itemDomains",
        "basicRelevance",
        "concentrationBonus",
        "queryConceptsInDomain",
        "itemConceptsInDomain",
        "domainRatio",
        "multiplicityBonus",
        "qualityBonus",
        "nonMatchingDomains",
        "mixingPenalty",
        "now",
        "itemDate",
        "daysDiff",
        "isCompleted",
        "sharedConcepts"
      ],
      "interfaces": {
        "Concept": {},
        "SemanticMatch": {},
        "SemanticQuery": {}
      },
      "enums": {
        "QueryIntent": {
          "values": [
            "FIND_SIMILAR",
            "work",
            "like",
            "this",
            "similar",
            "tasks",
            "SEARCH_CONTENT",
            "bugs",
            "about",
            "auth",
            "API",
            "work",
            "REFERENCE_PAST",
            "how",
            "I",
            "solved",
            "I",
            "fixed",
            "before",
            "EXPLORE_RELATED",
            "related",
            "to",
            "connected",
            "with",
            "GENERAL_SEARCH"
          ]
        }
      },
      "call_graph": {}
    },
    "src/services/field-discovery.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "child_process",
        "util"
      ],
      "functions": {},
      "classes": {
        "FieldDiscoveryService": {
          "methods": {
            "fetchWorkItemWithAllFields": "async (workItemId: number): Promise<any>",
            "analyzeFields": "(workItem: any): FieldAnalysisResult",
            "generateFieldDocumentation": "(analysisResults: FieldAnalysisResult[]): string",
            "discoverAllFields": "async (workItemIds: number[]): Promise<string>"
          }
        }
      },
      "variables": [
        "execAsync",
        "command",
        "metadataKeys",
        "value",
        "allSystemFields",
        "allVstsFields",
        "allCustomFields",
        "allMetadataFields",
        "allFieldTypes",
        "totalUniqueFields",
        "documentation",
        "type",
        "typeDistribution",
        "failedFetches",
        "workItem",
        "analysis",
        "summarySection",
        "updatedSummary"
      ],
      "interfaces": {
        "FieldAnalysisResult": {}
      },
      "call_graph": {}
    },
    "src/services/enhanced-query-engine.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "./database.js"
      ],
      "functions": {},
      "classes": {
        "EnhancedQueryEngine": {
          "methods": {
            "constructor": "(db: DatabaseService)",
            "processQuery": "async (query: string, userEmails?: string[]): Promise<string>",
            "__init__": "(db: DatabaseService)"
          }
        }
      },
      "variables": [
        "filters",
        "result",
        "normalizedQuery",
        "keywords",
        "dateRange",
        "technicalKeywords",
        "quotedMatches",
        "technicalWords",
        "now",
        "start",
        "lastMonthsMatch",
        "months",
        "lastWeeksMatch",
        "weeks",
        "end",
        "yearMatch",
        "year",
        "items",
        "searchText",
        "dateField",
        "itemDate",
        "date",
        "dateA",
        "dateB",
        "summary",
        "output",
        "typeCount",
        "displayItems",
        "number",
        "isHistorical",
        "snippet",
        "lowerDescription",
        "lowerKeyword",
        "index"
      ],
      "interfaces": {
        "QueryFilter": {},
        "QueryResult": {}
      },
      "call_graph": {}
    },
    "src/services/sync-service.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "./auth.js",
        "./azure-devops.js",
        "./database.js"
      ],
      "functions": {},
      "classes": {
        "SyncService": {
          "methods": {
            "constructor": "()",
            "performSync": "async (): Promise<void>",
            "startBackgroundSync": "async (): Promise<void>",
            "stopBackgroundSync": "(): void",
            "shouldSync": "async (): Promise<boolean>",
            "close": "async (): Promise<void>",
            "__init__": "()"
          }
        }
      },
      "constants": {
        "SYNC_INTERVAL": "value"
      },
      "variables": [
        "workItems",
        "envInterval",
        "defaultInterval",
        "parsed",
        "intervalMinutes",
        "lastSync",
        "now",
        "timeSinceSync",
        "fiveMinutes"
      ],
      "call_graph": {}
    },
    "src/services/azure-devops.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "child_process",
        "util"
      ],
      "functions": {},
      "classes": {
        "AzureDevOpsClient": {
          "methods": {
            "fetchWorkItems": "async (): Promise<WorkItemData[]>",
            "validateUserEmails": "async (emails: string[]): Promise<"
          }
        }
      },
      "variables": [
        "execAsync",
        "command",
        "result",
        "parsed",
        "parentRelation",
        "match",
        "userCommand",
        "userResult"
      ],
      "interfaces": {
        "WorkItemData": {}
      },
      "call_graph": {}
    },
    "src/services/database.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@prisma/client",
        "./azure-devops.js"
      ],
      "functions": {},
      "classes": {
        "DatabaseService": {
          "methods": {
            "constructor": "()",
            "syncWorkItems": "async (workItems: WorkItemData[]): Promise<void>",
            "getAllWorkItems": {
              "signature": "async ()",
              "called_by": [
                "DatabaseService.getWorkItemsForUsers"
              ]
            },
            "getWorkItemsByState": {
              "signature": "async (state: string)",
              "called_by": [
                "DatabaseService.getWorkItemsByStateForUsers"
              ]
            },
            "getWorkItemsByType": {
              "signature": "async (type: string)",
              "called_by": [
                "DatabaseService.getWorkItemsByTypeForUsers"
              ]
            },
            "getWorkItemsForUsers": {
              "calls": [
                "getAllWorkItems"
              ],
              "signature": "async (userEmails: string[])"
            },
            "getWorkItemsByStateForUsers": {
              "calls": [
                "getWorkItemsByState"
              ],
              "signature": "async (state: string, userEmails: string[])"
            },
            "getWorkItemsByTypeForUsers": {
              "calls": [
                "getWorkItemsByType"
              ],
              "signature": "async (type: string, userEmails: string[])"
            },
            "getLastSyncTime": "async (): Promise<Date | null>",
            "close": "async (): Promise<void>",
            "__init__": "()"
          }
        }
      },
      "variables": [
        "commonData",
        "lastItem"
      ],
      "call_graph": {}
    },
    "src/services/query-engine.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "./database.js",
        "./enhanced-query-engine.js"
      ],
      "functions": {},
      "classes": {
        "QueryEngine": {
          "methods": {
            "constructor": "(db: DatabaseService)",
            "processQuery": "async (query: string, userEmails?: string[]): Promise<string>",
            "__init__": "(db: DatabaseService)"
          }
        }
      },
      "variables": [
        "enhancedResult",
        "normalizedQuery",
        "simpleLegacyQueries",
        "enhancedIndicators",
        "activeItems",
        "inProgressItems",
        "allCurrentItems",
        "newItems",
        "allOpenItems",
        "userStories",
        "bugs",
        "tasks",
        "closedItems",
        "allItems",
        "historicalItems",
        "stats",
        "result",
        "recentItems"
      ],
      "call_graph": {}
    },
    "src/services/auth.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "child_process",
        "util"
      ],
      "functions": {},
      "classes": {
        "AzureAuth": {
          "methods": {
            "checkAuth": "async (): Promise<boolean>",
            "login": "async (): Promise<void>",
            "ensureAuth": "async (): Promise<void>"
          }
        }
      },
      "variables": [
        "isAuthenticated"
      ],
      "call_graph": {}
    },
    "src/services/__tests__/auth.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/semantic-search.test.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "vitest",
        "../semantic-search.js"
      ],
      "functions": {
        "createTestWorkItem": "(overrides = {})"
      },
      "classes": {},
      "variables": [
        "createTestWorkItem",
        "concepts",
        "authConcept",
        "loginConcept",
        "authenticationConcept",
        "authTerms",
        "query",
        "semanticQuery",
        "bugQuery",
        "storyQuery",
        "taskQuery",
        "simpleQuery",
        "complexQuery",
        "mockSemanticQuery",
        "workItem",
        "match",
        "recentItem",
        "oldItem",
        "recentMatch",
        "oldMatch",
        "referenceQuery",
        "completedItem",
        "activeItem",
        "completedMatch",
        "activeMatch",
        "workItems",
        "matches",
        "topMatch"
      ],
      "call_graph": {}
    },
    "src/services/__tests__/query-engine.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/azure-devops.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/database.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/sync-service.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/field-discovery.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "src/services/__tests__/enhanced-query-engine.test.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "vitest",
        "../enhanced-query-engine.js",
        "../database.js"
      ],
      "functions": {
        "createTestWorkItem": "(overrides = {})"
      },
      "classes": {},
      "variables": [
        "createTestWorkItem",
        "bugItem",
        "storyItem",
        "result",
        "taskItem",
        "completedItem",
        "activeItem",
        "closedItem",
        "authItem",
        "unrelatedItem",
        "dbItem",
        "otherItem",
        "apiItem",
        "lastMonth",
        "recentItem",
        "oldItem",
        "currentYear",
        "thisYearItem",
        "lastYearItem",
        "item2023",
        "item2024",
        "historicalItem",
        "currentItem",
        "matchingItem",
        "nonMatchingItems",
        "partialMatchItems",
        "item",
        "items",
        "itemWithMissingFields",
        "longQuery",
        "nonMatchingItem"
      ],
      "call_graph": {}
    },
    "src/mocks/handlers/azure-devops.handlers.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "msw"
      ],
      "functions": {
        "createUnauthorizedHandler": "()",
        "createNotFoundHandler": "()",
        "createServerErrorHandler": "()",
        "createRateLimitHandler": "()",
        "createCustomWorkItemHandler": "(workItem: any)",
        "createWorkItemsHandler": "(workItems: any[])"
      },
      "classes": {},
      "constants": {
        "AZURE_DEVOPS_BASE": "str"
      },
      "variables": [
        "mockWorkItems",
        "workItemsListHandler",
        "url",
        "ids",
        "requestedIds",
        "filteredItems",
        "workItemsQueryHandler",
        "body",
        "query",
        "createWorkItemHandler",
        "type",
        "titleOp",
        "descriptionOp",
        "newId",
        "newItem",
        "updateWorkItemHandler",
        "id",
        "existingItem",
        "updatedFields",
        "fieldName",
        "updatedItem",
        "workItemCommentsHandler",
        "createUnauthorizedHandler",
        "createNotFoundHandler",
        "createServerErrorHandler",
        "createRateLimitHandler",
        "createCustomWorkItemHandler",
        "createWorkItemsHandler",
        "azureDevOpsHandlers"
      ],
      "call_graph": {}
    },
    ".agent-os/.obsidian/workspace.json": {
      "language": "json",
      "parsed": false
    },
    ".agent-os/.obsidian/app.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Application entry point"
    },
    ".agent-os/.obsidian/core-plugins.json": {
      "language": "json",
      "parsed": false
    },
    ".agent-os/.obsidian/appearance.json": {
      "language": "json",
      "parsed": false
    },
    "tests/integration/azure-devops-server.test.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "tests/utils/test-helpers.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "vitest"
      ],
      "functions": {
        "createTestWorkItem": "(overrides: Partial<TestWorkItem> = {}): TestWorkItem",
        "createAzureWorkItem": "(overrides: Partial<AzureWorkItem> = {}): AzureWorkItem",
        "createWorkItemsResponse": "(workItems: AzureWorkItem[])",
        "createWiqlResponse": "(workItems: AzureWorkItem[])",
        "createMCPResponse": "(text: string, isError = false)",
        "waitFor": "async (condition: ()",
        "delay": "(ms: number): Promise<void>",
        "setupMockTimers": "()",
        "captureLogs": "()",
        "generateRandomString": "(length = 10): string",
        "setupTestEnv": {
          "calls": [
            "forEach"
          ],
          "signature": "(vars: Record<string, string>)"
        },
        "expectJsonStructure": {
          "calls": [
            "expectJsonStructure"
          ],
          "signature": "(actual: any, expected: any): void",
          "called_by": [
            "expectJsonStructure"
          ]
        }
      },
      "classes": {},
      "variables": [
        "baseId",
        "startTime",
        "logSpy",
        "errorSpy",
        "warnSpy",
        "chars",
        "result",
        "i",
        "originalEnv"
      ],
      "interfaces": {
        "TestWorkItem": {},
        "AzureWorkItem": {}
      },
      "call_graph": {}
    },
    "tests/utils/mcp-client.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@modelcontextprotocol/sdk/client/index.js",
        "@modelcontextprotocol/sdk/client/stdio.js",
        "child_process",
        "@modelcontextprotocol/sdk/types.js"
      ],
      "functions": {
        "createTestMCPClient": "async (serverPath: string, args: string[] = []): Promise<TestMCPClient>",
        "callToolWithTimeout": "async (client: TestMCPClient, toolName: string, args: any = {}, timeoutMs = 10000): Promise<CallToolResult>",
        "waitForServerReady": "async (client: TestMCPClient, maxWaitMs = 5000): Promise<void>"
      },
      "classes": {
        "TestMCPClient": {
          "methods": {
            "constructor": "()",
            "connect": "async (serverPath: string, args: string[] = []): Promise<void>",
            "listTools": "async (): Promise<ListToolsResult>",
            "callTool": "async (name: string, args: any = {}): Promise<CallToolResult>",
            "close": "async (): Promise<void>",
            "isConnected": "(): boolean",
            "getProcessId": "(): number | undefined",
            "__init__": "()"
          }
        }
      },
      "variables": [
        "client",
        "timeout",
        "startTime"
      ],
      "call_graph": {}
    },
    "tests/fixtures/work-items.json": {
      "language": "json",
      "parsed": false
    },
    "prisma/migrations/20250821102909_add_comprehensive_metadata/migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "prisma/migrations/20250708083148_add_historical_fields/migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "prisma/migrations/20250708012432_init/migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "prisma/migrations/20250821100247_add_comprehensive_metadata/migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "prisma/migrations/20250708131651_add_completion_tracking/migration.sql": {
      "language": "sql",
      "parsed": false
    }
  },
  "dependency_graph": {
    "src/mcp-server.ts": [
      "@modelcontextprotocol/sdk/server/index.js",
      "@modelcontextprotocol/sdk/server/stdio.js",
      "@modelcontextprotocol/sdk/types.js"
    ],
    "src/mocks/prisma.mock.ts": [
      "vitest",
      "@prisma/client"
    ],
    "src/services/field-discovery.ts": [
      "child_process",
      "util"
    ],
    "src/services/azure-devops.ts": [
      "child_process",
      "util"
    ],
    "src/services/database.ts": [
      "@prisma/client"
    ],
    "src/services/auth.ts": [
      "child_process",
      "util"
    ],
    "src/services/__tests__/semantic-search.test.ts": [
      "vitest"
    ],
    "src/services/__tests__/enhanced-query-engine.test.ts": [
      "vitest"
    ],
    "src/mocks/handlers/azure-devops.handlers.ts": [
      "msw"
    ],
    "tests/utils/test-helpers.ts": [
      "vitest"
    ],
    "tests/utils/mcp-client.ts": [
      "@modelcontextprotocol/sdk/client/index.js",
      "@modelcontextprotocol/sdk/client/stdio.js",
      "child_process",
      "@modelcontextprotocol/sdk/types.js"
    ]
  },
  "staleness_check": 1755168219.958059
}