name: Azure DevOps Bot CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript
        run: pnpm run build

      - name: Run linting
        run: pnpm run lint
        if: matrix.node-version == '20.x'

      - name: Run tests
        run: pnpm test --run
        env:
          # Required for Azure DevOps REST API tests
          # Set this in repository secrets: Settings > Secrets and variables > Actions
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          # Test-specific environment variables
          NODE_ENV: test
          # Use in-memory database for testing
          DATABASE_URL: 'file:./test.db'

      - name: Generate test coverage
        run: pnpm run test:coverage
        if: matrix.node-version == '20.x'
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          # Required PAT for integration testing
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          # Azure DevOps configuration
          AZURE_DEVOPS_USER_EMAILS: ${{ secrets.AZURE_DEVOPS_USER_EMAILS }}

      - name: Validate authentication flows
        run: node -e "
          try {
          process.env.AZURE_DEVOPS_PAT = 'invalid-token';
          require('./dist/src/services/azure-devops.js');
          console.log('❌ Should have failed with invalid PAT');
          process.exit(1);
          } catch (error) {
          if (error.message.includes('AZURE_DEVOPS_PAT')) {
          console.log('✅ Authentication validation working correctly');
          } else {
          console.log('❌ Unexpected error:', error.message);
          process.exit(1);
          }
          }"

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          pnpm audit --audit-level moderate

      - name: Check for secrets in code
        run: |
          # Basic check for hardcoded secrets/tokens
          if grep -r "pat.*=" src/ --include="*.ts" --include="*.js" | grep -v "AZURE_DEVOPS_PAT"; then
            echo "❌ Potential hardcoded PAT found in code"
            exit 1
          fi
          echo "✅ No hardcoded secrets detected"
